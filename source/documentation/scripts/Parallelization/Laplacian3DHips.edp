load "msh3"
load "hips_FreeFem" //load Hips library

// Parameters
int nn = 10;
real zmin = 0, zmax = 1;
int[int] iparm(14);
real[int] dparm(6);
for (int iii = 0; iii < 14; iii++) iparm[iii] = -1;
for (int iii = 0; iii < 6; iii++) dparm[iii] = -1;
iparm[0] = 0; //use iterative solver
iparm[1] = 1; //PCG as Krylov method
iparm[4] = 0; //Matrix are symmetric
iparm[5] = 1; //Pattern are also symmetric
iparm[9] = 1; //Scale matrix
dparm[0] = 1e-13; //Tolerance to convergence
dparm[1] = 5e-4; //Threshold in ILUT
dparm[2] = 5e-4; //Threshold for Schur preconditionner

// Functions
func ue = 2*x*x + 3*y*y + 4*z*z + 5*x*y + 6*x*z + 1;
func uex = 4*x + 5*y + 6*z;
func uey = 6*y + 5*x;
func uez = 8*z + 6*x;
func f = -18.;

// Mesh
mesh Th2 = square(nn, nn);

int[int] rup = [0,2], rdown=[0, 1];
int[int] rmid=[1, 1, 2, 1, 3, 1, 4, 1];

mesh3 Th=buildlayers(Th2, nn,
	zbound=[zmin, zmax],
	reffacemid=rmid,
	reffaceup = rup,
	reffacelow = rdown);

// Fespace
fespace Vh2(Th2, P2);
Vh2 ux, uz, p2;

fespace Vh(Th, P2);
Vh uhe = ue;
cout << "uhe min = " << uhe[].min << ", max = " << uhe[].max << endl;
Vh u, v;
Vh F;

// Macro
macro Grad3(u) [dx(u), dy(u), dz(u)] //

// Problem
varf va (u, v)
	= int3d(Th)(
		  Grad3(v)' * Grad3(u)
	)
	+ int2d(Th, 2)(
		  u*v
	)
	- int3d(Th)(
		  f*v
	)
	- int2d(Th, 2)(
		  ue*v
		+ (uex*N.x + uey*N.y + uez*N.z)*v
	)
	+ on(1, u=ue);

varf l (unused, v) = int3d(Th)(f*v);

real cpu=clock();
matrix Aa = va(Vh, Vh);

F[] = va(0, Vh);

if (mpirank == 0){
	cout << "Size of A = " << Aa.n << endl;
	cout << "Non zero coefficients = " << Aa.nbcoef << endl;
	cout << "CPU TIME FOR FORMING MATRIX = " << clock()-cpu << endl;
}

set(Aa, solver=sparsesolver, dparams=dparm, lparams=iparm); //Set hips as linear solver

// Solve
u[] = Aa^-1*F[];

// Plot
plot(u);
