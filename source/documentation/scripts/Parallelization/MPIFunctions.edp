mpiComm Comm(mpiCommWorld, 0, 0);

int MPICommSize = mpiSize(Comm);
int MPIRank = mpiRank(Comm);

if (MPIRank == 0) cout << "MPI Comm size = " << MPICommSize << endl;
cout << "MPI rank in Comm = " << mpiRank(Comm) << endl;

mpiRequest Req;
mpiRequest[int] ReqArray(10);

for (int i = 0; i < MPICommSize; i++){
	//return processor i with no Resquest in MPI_COMM_WORLD
	processor(i);
	//return processor any source with no Resquest in MPI_COMM_WORLD
	processor(mpiAnySource);
	//return processor i with no Resquest in Comm
	processor(i, Comm);
	//return processor i with no Resquest in Comm
	processor(Comm, i);
	//return processor i with Resquest rq in Comm
	/* processor(i, Req, Comm);
	//return processor i with Resquest rq in MPI_COMM_WORLD
	processor(i, Req); */
	//return processor i in MPI_COMM_WORLD in block mode for synchronously communication
	processorblock(i);
	//return processor any source in MPI_COMM_WORLD in block mode for synchronously communication
	processorblock(mpiAnySource);
	//return processor i in in Comm in block mode
	processorblock(i, Comm);
}

mpiBarrier(Comm); //do a MPI_Barrier on communicator Comm
mpiWaitAny(ReqArray); //wait add of Request array,
mpiWait(Req); //wait on a Request
real t = mpiWtime(); //return MPIWtime in second
real tick = mpiWtick(); //return MPIWTick in second
