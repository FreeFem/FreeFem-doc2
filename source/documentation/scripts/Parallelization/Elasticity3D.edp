load "hpddm" //load HPDDM plugin
macro partitioner()metis//metis, scotch, or parmetis
macro dimension()3//2D or 3D
macro vectorialfe()P1//
include "macro_ddm.idp" //additional DDM functions

// Macro
macro def(i)[i, i#B, i#C] //vector field definition
macro init(i)[i, i, i] //vector field initialization

real Sqrt = sqrt(2.0);
macro epsilon(u) [dx(u), dy(u#B), dz(u#C),
	(dz(u#B) + dy(u#C)) / Sqrt,
	(dz(u) + dx(u#C)) / Sqrt,
	(dy(u) + dx(u#B)) / Sqrt] //
macro div(u) (dx(u) + dy(u#B) + dz(u#C)) //

// Parameters
real f = -9000.0;
real strain = 100.0;
real Young = 2.0e11; // steel
real poisson = 0.35;

func Pk = [vectorialfe, vectorialfe, vectorialfe];

string deflation = getARGV("-deflation", "geneo"); //coarse space construction
int overlap = getARGV("-overlap", 1); //geometric overlap between subdomains
int fakeInterface = getARGV("-interface", 10); //interface between subdomains
int s = getARGV("-split", 1); //refinement factor
int p = getARGV("-hpddm_master_p", 1);

mpiComm comm;
bool excluded = splitComm(mpiCommWorld, p, comm, topology = getARGV("-hpddm_master_topology", 0), exclude = (usedARGV("-hpddm_master_exclude") != -1));

// Display
if (verbosity > 0 && mpirank == 0){
	cout << " --- " << mpirank << "/" << mpisize;
	cout << " - Elasticity3D.edp - input parameters: refinement factor = " << s << " - overlap = " << overlap << endl;
}

// Mesh
int[int] LL = [2, 3, 2, 1, 2, 2];
meshN ThBorder, Th = cube(1, 1, 1, [x, y, z]);
fespace Wh(Th, Pk); //local finite element space

int[int] arrayIntersection; //ranks of neighboring subdomains
int[int][int] restrictionIntersection(0); //local-to-neighbors renumbering
real[int] D; //partition of unity
{
	meshN ThGlobal = cube(10*getARGV("-global", 5), getARGV("-global", 5), getARGV("-global", 5), [10*x, y, z], label=LL); //global mesh
	build(Th, ThBorder, ThGlobal, fakeInterface, s, overlap, D, arrayIntersection, restrictionIntersection, Wh, Pk, comm, excluded, 3)
}

// Problem
real tmp = 1.0 + poisson;
real mu = Young / (2.0 * tmp);
real lambda = Young * poisson / (tmp * (1.0 - 2.0 * poisson));
real[int] rhs; //local right-hand side
matrix<real> Mat; //local operator
{ //local weak form
	meshN ThAugmented = Th + ThBorder;
	varf vPb (def(u), def(v))
		= intN(ThAugmented)(
			  lambda * div(u) * div(v)
			+ 2.0 * mu * (epsilon(u)' * epsilon(v))
		)
		+ intN(ThAugmented)(
			  f * vC
		)
		+ on(1, u=0.0, uB=0.0, uC=0.0)
		;

	fespace WhAugmented(ThAugmented, Pk);
	Mat = vPb(WhAugmented, WhAugmented, tgv=-1);
	real[int] rhsFull = vPb(0, WhAugmented, tgv=-1);
	matrix R = interpolate(Wh, WhAugmented);
	renumbering(Mat, R, rhsFull, rhs);
}
ThBorder = cube(1, 1, 1, [x, y, z]);

dschwarz A(Mat, arrayIntersection, restrictionIntersection, scaling = D);

set(A, sparams = "-hpddm_schwarz_method ras -hpddm_schwarz_coarse_correction balanced -hpddm_variant right -hpddm_verbosity 1 -hpddm_geneo_nu 10");

matrix<real> Opt; //local operator with optimized boundary conditions
dpair ret;
{
	int solver = getOption("schwarz_method");
	if (solver == 1 || solver == 2 || solver == 4){ //optimized Schwarz methods
		fespace Ph(Th, P0);
		real kZero = getARGV("-kZero", 10.0);
		Ph transmission = 2 * kZero * mu * (2 * mu + lambda) / (lambda + 3 * mu);
		varf vOptimized (def(u), def(v))
			= intN(Th)(
				  lambda * div(u) * div(v)
				+ 2.0 * mu * (epsilon(u)' * epsilon(v))
			)
			+ intN1(Th, fakeInterface)(
				  transmission * (def(u)' * def(v))
			)
			+ on(1, u=0.0, uB=0.0, uC=0.0)
			;
		Opt = vOptimized(Wh, Wh, tgv=-1);
	}
	if (mpisize > 1 && isSetOption("schwarz_coarse_correction")){ //two-level Schwarz methods
		if(excluded)
			attachCoarseOperator(mpiCommWorld, A);
		else {
			varf vPbNoPen (def(u), def(v))
				= intN(Th)(
					  lambda * div(u) * div(v)
					+ 2.0 * mu * (epsilon(u)' * epsilon(v))
				)
				+ on(1, u=0.0, uB=0.0, uC=0.0)
				;
			matrix<real> noPen = vPbNoPen(Wh, Wh, solver=CG);
			if(deflation == "geneo") //standard GenEO, no need for RHS -> deduced from LHS (Neumann matrix)
				attachCoarseOperator(mpiCommWorld, A, A=noPen, ret=ret);
			else if(deflation == "dtn"){
				varf vMass (def(u), def(v)) = intN1(Th, fakeInterface)(u * v);
				matrix<real> massMatrix = vMass(Wh, Wh, solver=CG);
				attachCoarseOperator(mpiCommWorld, A, A=noPen, B=massMatrix, pattern=Opt, ret=ret);
			}
			else if(deflation == "geneo-2") //GenEO-2 for optimized Schwarz methods, need for RHS (LHS is still Neumann matrix)
				attachCoarseOperator(mpiCommWorld, A, A=noPen, B=Opt, pattern=Opt, ret=ret);
		}
	}
}


// Solve
Wh<real> def(u); //local solution

if(Opt.n > 0) //optimized Schwarz methods
	DDM(A, u[], rhs, excluded=excluded, ret=ret, O=Opt);
else
	u[] = A^-1 * rhs;

// Error
real[int] err(u[].n);
err = A * u[]; //global matrix-vector product
err -= rhs;

// Plot
plotMPI(Th, u[], "Global solution", Pk, def, real, 3, 1)
plotMPI(Th, err, "Global residual", Pk, def, real, 3, 1)
real alpha = 2000.0;
meshN ThMoved = movemesh3(Th, transfo = [x + alpha*u, y + alpha*uB, z + alpha*uC]);
u[] = mpirank;
plotMPI(ThMoved, u[], "Global moved solution", Pk, def, real, 3, 1)
