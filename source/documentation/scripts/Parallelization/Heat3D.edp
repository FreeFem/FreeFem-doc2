load "hpddm" //load HPDDM plugin
macro partitioner()metis//metis, scotch, or parmetis
macro dimension()3//2D or 3D
include "macro_ddm.idp" //additional DDM functions

// Macro
macro def(i)i //scalar field definition
macro init(i)i //scalar field initialization
macro grad(u) [dx(u), dy(u), dz(u)] //three-dimensional gradient

// Parameters
func Pk = P2; //finite element space

string deflation = getARGV("-deflation", "geneo"); //coarse space construction
int overlap = getARGV("-overlap", 1); //geometric overlap between subdomains
int fakeInterface = getARGV("-interface", 10); //interface between subdomains
int s = getARGV("-split", 1); //refinement factor
real dt = getARGV("-dt", 0.01); //time step
int iMax = getARGV("-iMax", 10); //number of iterations

mpiComm comm;
int p = getARGV("-hpddm_master_p", 1);
bool excluded = splitComm(mpiCommWorld, p, comm, topology = getARGV("-hpddm_master_topology", 0), exclude = (usedARGV("-hpddm_master_exclude") != -1));

// Display
if (verbosity > 0 && mpirank == 0){
	cout << " --- " << mpirank << "/" << mpisize;
	cout << " - Heat3D.edp - input parameters: refinement factor = " << s << " - overlap = " << overlap << endl;
}

// Mesh
int[int] LL = [1, 2, 1, 1, 1, 1];
meshN ThBorder, Th = cube(1, 1, 1, [x, y, z]);
fespace Wh(Th, Pk); //local finite element space
int[int] arrayIntersection; //ranks of neighboring subdomains
int[int][int] restrictionIntersection(0); //local-to-neighbors renumbering
real[int] D; //partition of unity
{
	meshN ThGlobal = cube(getARGV("-global", 10), getARGV("-global", 10), getARGV("-global", 10), [x, y, z], label=LL); //global mesh
	build(Th, ThBorder, ThGlobal, fakeInterface, s, overlap, D, arrayIntersection, restrictionIntersection, Wh, Pk, comm, excluded)
}

// Problem
real[int] rhs; // local right-hand side
matrix<real> Mat; //local operator
matrix<real> M; //local mass matrix
{ //local weak form
	meshN ThAugmented = Th + ThBorder;
	varf vPb (u, v)
	 	= intN(ThAugmented)(
			  u * v
			+ dt * (grad(u)' * grad(v))
		)
		+ intN(ThAugmented)(
			  dt * v
		)
		+ on(1, u=0.0)
		;
	fespace WhAugmented(ThAugmented, Pk);
	Mat = vPb(WhAugmented, WhAugmented, tgv=-1);
	real[int] rhsFull = vPb(0, WhAugmented, tgv=-1);
	matrix R = interpolate(Wh, WhAugmented);
	varf vPbM (u, v) = intN(ThAugmented)(u * v);
	M = vPbM(WhAugmented, WhAugmented);
	renumbering(M, R, rhsFull, rhs);
	renumbering(Mat, R, rhsFull, rhs);
}
ThBorder = cube(1, 1, 1, [x, y, z]);

dschwarz A(Mat, arrayIntersection, restrictionIntersection, scaling=D);

matrix<real> Opt; //local operator with optimized boundary conditions
dpair ret;
{
	int solver = getOption("schwarz_method");
	if (solver == 1 || solver == 2 || solver == 4){ //optimized Schwarz methods
		fespace Ph(Th, P0);
		real kZero = getARGV("-kZero", 10.0);
		Ph transmission = kZero;
		varf vOptimized (u, v)
			= intN(Th)(
				  u * v
				+ dt * (grad(u)' * grad(v))
			)
			+ intN1(Th, fakeInterface)(
				  transmission * (u * v)
			)
			+ on(1, u=0.0)
			;
		Opt = vOptimized(Wh, Wh, tgv=-1);
	}
	if (mpisize > 1 && isSetOption("schwarz_coarse_correction")){ //two-level Schwarz methods
		if(excluded)
			attachCoarseOperator(mpiCommWorld, A);
		else {
			varf vPbNoPen (u, v)
				= intN(Th)(
					  u * v
					+ dt * (grad(u)' * grad(v))
				)
				+ on(1, u=0.0)
				;
			matrix<real> noPen = vPbNoPen(Wh, Wh, solver=CG);
			if(deflation == "geneo") //standard GenEO, no need for RHS -> deduced from LHS (Neumann matrix)
				attachCoarseOperator(mpiCommWorld, A, A=noPen, ret = ret);
			else if(deflation == "dtn") {
				varf vMass (def(u), def(v)) = intN1(Th, fakeInterface)(u * v);
				matrix<real> massMatrix = vMass(Wh, Wh, solver=CG);
				attachCoarseOperator(mpiCommWorld, A, A=noPen, B=massMatrix, pattern=Opt, ret=ret);
			}
			else if(deflation == "geneo-2") //GenEO-2 for optimized Schwarz methods, need for RHS (LHS is still Neumann matrix)
				attachCoarseOperator(mpiCommWorld, A, A=noPen, B=Opt, pattern=Opt, ret=ret);
		}
	}
}

// Solve
set(A, sparams="-hpddm_reuse_preconditioner=1");
Wh<real> def(u) = init(0.0); //local solution
for (int i = 0; i < iMax; ++i){
	real[int] newRhs(rhs.n);
	dmv(A, M, u[], newRhs); //newRhs = M * u[]
	newRhs += rhs;

	if (Opt.n > 0) //optimized Schwarz methods
		DDM(A, u[], newRhs, excluded=excluded, ret=ret, O=Opt);
	else
		u[] = A^-1 * newRhs;

	plotMPI(Th, u[], "Global solution", Pk, def, real, 3, 0)
}
