// Mesh
mesh Th = square(4, 4);
mesh Th4 = square(2, 2, [x*0.5, y*0.5]);
plot(Th, Th4, wait=true);

// Fespace
fespace Vh(Th, P1);
Vh v, vv;
fespace Vh4(Th4, P1);
Vh4 v4=x*y;

fespace Wh(Th, P0);
fespace Wh4(Th4, P0);

// Interpolation
matrix IV = interpolate(Vh, Vh4); //here the function is exended by continuity
cout << "IV Vh<-Vh4 " << IV << endl;

v=v4;
vv[]= IV*v4[]; //here v == vv

real[int] diff= vv[] - v[];
cout << "|| v - vv || = " << diff.linfty << endl;
assert( diff.linfty<= 1e-6);

matrix IV0 = interpolate(Vh, Vh4, inside=1); //here the function is exended by zero
cout << "IV Vh<-Vh4 (inside=1) " << IV0 << endl;

matrix IVt0 = interpolate(Vh, Vh4, inside=1, t=1);
cout << "IV Vh<-Vh4^t (inside=1) " << IVt0 << endl;

matrix IV4t0 = interpolate(Vh4, Vh);
cout << "IV Vh4<-Vh^t " << IV4t0 << endl;

matrix IW4 = interpolate(Wh4, Wh);
cout << "IV Wh4<-Wh " << IW4 << endl;

matrix IW4V = interpolate(Wh4, Vh);
cout << "IV Wh4<-Vh " << IW4 << endl;


real[int] xx = [.3, .4], yy = [.1, .4];
int c = 0, dop = 0;
matrix Ixx = interpolate(Vh, xx, yy, op=dop, composante=c);
cout << Ixx << endl;
Vh ww;
real[int] dd = [1, 2];
ww[] = Ixx*dd;
