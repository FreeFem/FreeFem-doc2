-- FreeFem++ v  3.580000 (date jeudi 11 janvier 2018, 17:24:44 (UTC+0100))
 Load: lg_fem lg_mesh lg_mesh3 eigenvalue 
    1 : // Mesh
    2 : mesh Th = square(2, 2);
    3 : 
    4 : cout << "// Get data of the mesh" << endl;
    5 : {
    6 : 	int NbTriangles = Th.nt;
    7 : 	real MeshArea = Th.measure;
    8 : 	real BorderLenght = Th.bordermeasure;
    9 : 
   10 : 	cout << "Number of triangle = " << NbTriangles << endl;
   11 : 	cout << "Mesh area = " << MeshArea << endl;
   12 : 	cout << "Border length = " << BorderLenght << endl;
   13 : 
   14 : 	// Th(i) return the vextex i of Th
   15 : 	// Th[k] return the triangle k of Th
   16 : 	// Th[k][i] return the vertex i of the triangle k of Th
   17 : 	for (int i = 0; i < NbTriangles; i++)
   18 : 		for (int j = 0; j < 3; j++)
   19 : 			cout << i << " " << j << " - Th[i][j] = " << Th[i][j]
   20 : 				 << ", x = " << Th[i][j].x
   21 : 				 << ", y= " << Th[i][j].y
   22 : 				 << ", label=" << Th[i][j].label << endl;
   23 : }
   24 : 
   25 : cout << "// Hack to get vertex coordinates" << endl;
   26 : {
   27 : 	fespace femp1(Th, P1);
   28 : 	femp1 Thx=x,Thy=y;
   29 : 
   30 : 	int NbVertices = Th.nv;
   31 : 	cout << "Number of vertices = " << NbVertices << endl;
   32 : 
   33 : 	for (int i = 0; i < NbVertices; i++)
   34 : 		cout << "Th(" << i << ") : " << Th(i).x << " " << Th(i).y << " " << Th(i).label
   35 : 			 << endl << "	old method: " << Thx[][i] << " " << Thy[][i] << endl;
   36 : }
   37 : 
   38 : cout << "// Method to find information of point (0.55,0.6)
  ... : " << endl;
   39 : {
   40 : 	int TNumber = Th(0.55, 0.6).nuTriangle; //the triangle number
   41 : 	int RLabel = Th(0.55, 0.6).region; //the region label
   42 : 
   43 : 	cout << "Triangle number in point (0.55, 0.6): " << TNumber << endl;
   44 : 	cout << "Region label in point (0.55, 0.6): " << RLabel << endl;
   45 : }
   46 : 
   47 : cout << "// Information of a triangle" << endl;
   48 : {
   49 : 	int TNumber = Th(0.55, 0.6).nuTriangle;
   50 : 	real TArea = Th[TNumber].area; //triangle area
   51 : 	real TRegion = Th[TNumber].region; //triangle region
   52 : 	real TLabel = Th[TNumber].label; //triangle label, same as region for triangles
   53 : 
   54 : 	cout << "Area of triangle " << TNumber << ": " << TArea << endl;
   55 : 	cout << "Region of triangle " << TNumber << ": " << TRegion << endl;
   56 : 	cout << "Label of triangle " << TNumber << ": " << TLabel << endl;
   57 : }
   58 : 
   59 : cout << "// Hack to get a triangle containing point x, y o
  ... : r region number (old method)" << endl;
   60 : {
   61 : 	fespace femp0(Th, P0);
   62 : 	femp0 TNumbers; //a P0 function to get triangle numbering
   63 : 	for (int i = 0; i < Th.nt; i++)
   64 : 		TNumbers[][i] = i;
   65 : 	femp0 RNumbers = region; //a P0 function to get the region number
   66 : 
   67 : 	int TNumber = TNumbers(0.55, 0.6); // Number of the triangle containing (0.55, 0,6)
   68 : 	int RNumber = RNumbers(0.55, 0.6); // Number of the region containing (0.55, 0,6)
   69 : 
   70 : 	cout << "Point (0.55,0,6) :" << endl;
   71 : 	cout << "	Triangle number = " << TNumber << endl;
   72 : 	cout << "	Region number = " << RNumber << endl;
   73 : }
   74 : 
   75 : cout << "// New method to get boundary information and mes
  ... : h adjacent" << endl;
   76 : {
   77 : 	int k = 0;
   78 : 	int l=1;
   79 : 	int e=1;
   80 : 
   81 : 	// Number of boundary elements
   82 : 	int NbBoundaryElements = Th.nbe;
   83 : 	cout << "Number of boundary element = " << NbBoundaryElements << endl;
   84 : 	// Boundary element k in {0, ..., Th.nbe}
   85 : 	int BoundaryElement = Th.be(k);
   86 : 	cout << "Boundary element " << k << " = " << BoundaryElement << endl;
   87 : 	// Vertice l in {0, 1} of boundary element k
   88 : 	int Vertex = Th.be(k)[l];
   89 : 	cout << "Vertex " << l << " of boundary element " << k << " = " << Vertex << endl;
   90 : 	// Triangle containg the obundary element k
   91 : 	int Triangle = Th.be(k).Element;
   92 : 	cout << "Triangle containing the boundary element " << k << " = " << Triangle << endl;
   93 : 	// Triangle egde nubmer containing the boundary element k
   94 : 	int Edge = Th.be(k).whoinElement;
   95 : 	cout << "Triangle edge number containing the boundary elem
  ... : ent " << k << " = " << Edge << endl;
   96 : 	// Adjacent triangle of the triangle k by edge e
   97 : 	int Adjacent = Th[k].adj(e); //The value of e is changed to the corresponding edge in the adjacent triangle
   98 : 	cout << "Adjacent triangle of the triangle " << k << " by edge " << e << " = " << Adjacent << endl;
   99 : 	cout << "	Corresponding edge = " << e << endl;
  100 : 	// If there is no adjacent triangle by edge e, the same triangle is returned
  101 : 	//Th[k] == Th[k].adj(e)
  102 : 	// Else a different triangle is returned
  103 : 	//Th[k] != Th[k].adj(e)
  104 : }
  105 : 
  106 : cout << "// Print mesh connectivity " << endl;
  107 : {
  108 : 	int NbTriangles = Th.nt;
  109 : 	for (int k = 0; k < NbTriangles; k++)
  110 : 		cout << k << " : " << int(Th[k][0]) << " " << int(Th[k][1])
  111 : 			 << " " << int(Th[k][2])
  112 : 			 << ", label " << Th[k].label << endl;
  113 : 
  114 : 	for (int k = 0; k < NbTriangles; k++)
  115 : 		for (int e = 0, ee; e < 3; e++)
  116 : 			//set ee to e, and ee is change by method adj,
  117 : 			cout << k << " " << e << " <=> " << int(Th[k].adj((ee=e))) << " " << ee
  118 : 				 << ", adj: " << (Th[k].adj((ee=e)) != Th[k]) << endl;
  119 : 
  120 : 	int NbBoundaryElements = Th.nbe;
  121 : 	for (int k = 0; k < NbBoundaryElements; k++)
  122 : 		cout << k << " : " << Th.be(k)[0] << " " << Th.be(k)[1]
  123 : 			 << " , label " << Th.be(k).label
  124 : 			 << ", triangle " << int(Th.be(k).Element)
  125 : 			 << " " << Th.be(k).whoinElement << endl;
  126 : 
  127 : 	real[int] bb(4);
  128 : 	boundingbox(Th, bb);
  129 : 	// bb[0] = xmin, bb[1] = xmax, bb[2] = ymin, bb[3] =ymax
  130 : 	cout << "boundingbox:" << endl;
  131 : 	cout << "xmin = " << bb[0]
  132 : 		 << ", xmax = " << bb[1]
  133 : 		 << ", ymin = " << bb[2]
  134 : 		 << ", ymax = " << bb[3] << endl;
  135 : }
  136 : cout << chi(Th) << endl;
  137 :  sizestack + 1024 =1992  ( 968 )

  -- Square mesh : nb vertices  =9 ,  nb triangles = 8 ,  nb boundary edges 8
// Get data of the mesh
Number of triangle = 8
Mesh area = 1
Border length = 4
0 0 - Th[i][j] = 0, x = 0, y= 0, label=4
0 1 - Th[i][j] = 1, x = 0.5, y= 0, label=1
0 2 - Th[i][j] = 4, x = 0.5, y= 0.5, label=0
1 0 - Th[i][j] = 0, x = 0, y= 0, label=4
1 1 - Th[i][j] = 4, x = 0.5, y= 0.5, label=0
1 2 - Th[i][j] = 3, x = 0, y= 0.5, label=4
2 0 - Th[i][j] = 1, x = 0.5, y= 0, label=1
2 1 - Th[i][j] = 2, x = 1, y= 0, label=2
2 2 - Th[i][j] = 5, x = 1, y= 0.5, label=2
3 0 - Th[i][j] = 1, x = 0.5, y= 0, label=1
3 1 - Th[i][j] = 5, x = 1, y= 0.5, label=2
3 2 - Th[i][j] = 4, x = 0.5, y= 0.5, label=0
4 0 - Th[i][j] = 3, x = 0, y= 0.5, label=4
4 1 - Th[i][j] = 4, x = 0.5, y= 0.5, label=0
4 2 - Th[i][j] = 7, x = 0.5, y= 1, label=3
5 0 - Th[i][j] = 3, x = 0, y= 0.5, label=4
5 1 - Th[i][j] = 7, x = 0.5, y= 1, label=3
5 2 - Th[i][j] = 6, x = 0, y= 1, label=4
6 0 - Th[i][j] = 4, x = 0.5, y= 0.5, label=0
6 1 - Th[i][j] = 5, x = 1, y= 0.5, label=2
6 2 - Th[i][j] = 8, x = 1, y= 1, label=3
7 0 - Th[i][j] = 4, x = 0.5, y= 0.5, label=0
7 1 - Th[i][j] = 8, x = 1, y= 1, label=3
7 2 - Th[i][j] = 7, x = 0.5, y= 1, label=3
// Hack to get vertex coordinates
Number of vertices = 9
Th(0) : 0 0 4
	old method: 0 0
Th(1) : 0.5 0 1
	old method: 0.5 0
Th(2) : 1 0 2
	old method: 1 0
Th(3) : 0 0.5 4
	old method: 0 0.5
Th(4) : 0.5 0.5 0
	old method: 0.5 0.5
Th(5) : 1 0.5 2
	old method: 1 0.5
Th(6) : 0 1 4
	old method: 0 1
Th(7) : 0.5 1 3
	old method: 0.5 1
Th(8) : 1 1 3
	old method: 1 1
// Method to find information of point (0.55,0.6)
Triangle number in point (0.55, 0.6): 7
Region label in point (0.55, 0.6): 0
// Information of a triangle
Area of triangle 7: 0.125
Region of triangle 7: 0
Label of triangle 7: 0
// Hack to get a triangle containing point x, y or region number (old method)
Point (0.55,0,6) :
	Triangle number = 7
	Region number = 0
// New method to get boundary information and mesh adjacent
Number of boundary element = 8
Boundary element 0 = 0
Vertex 1 of boundary element 0 = 1
Triangle containing the boundary element 0 = 0
Triangle edge number containing the boundary element 0 = 2
Adjacent triangle of the triangle 0 by edge 2 = 1
	Corresponding edge = 2
// Print mesh connectivity 
0 : 0 1 4, label 0
1 : 0 4 3, label 0
2 : 1 2 5, label 0
3 : 1 5 4, label 0
4 : 3 4 7, label 0
5 : 3 7 6, label 0
6 : 4 5 8, label 0
7 : 4 8 7, label 0
0 0 <=> 3 1, adj: 1
0 1 <=> 1 2, adj: 1
0 2 <=> 0 2, adj: 0
1 0 <=> 4 2, adj: 1
1 1 <=> 1 1, adj: 0
1 2 <=> 0 1, adj: 1
2 0 <=> 2 0, adj: 0
2 1 <=> 3 2, adj: 1
2 2 <=> 2 2, adj: 0
3 0 <=> 6 2, adj: 1
3 1 <=> 0 0, adj: 1
3 2 <=> 2 1, adj: 1
4 0 <=> 7 1, adj: 1
4 1 <=> 5 2, adj: 1
4 2 <=> 1 0, adj: 1
5 0 <=> 5 0, adj: 0
5 1 <=> 5 1, adj: 0
5 2 <=> 4 1, adj: 1
6 0 <=> 6 0, adj: 0
6 1 <=> 7 2, adj: 1
6 2 <=> 3 0, adj: 1
7 0 <=> 7 0, adj: 0
7 1 <=> 4 0, adj: 1
7 2 <=> 6 1, adj: 1
0 : 0 1 , label 1, triangle 0 2
1 : 1 2 , label 1, triangle 2 2
2 : 2 5 , label 2, triangle 2 0
3 : 5 8 , label 2, triangle 6 0
4 : 6 7 , label 3, triangle 5 0
5 : 7 8 , label 3, triangle 7 0
6 : 0 3 , label 4, triangle 1 1
7 : 3 6 , label 4, triangle 5 1
boundingbox:
xmin = 0, xmax = 1, ymin = 0, ymax = 1
1
times: compile 0.004094s, execution 0.000319s,  mpirank:0
 CodeAlloc : nb ptr  3391,  size :385864 mpirank: 0
Ok: Normal End
