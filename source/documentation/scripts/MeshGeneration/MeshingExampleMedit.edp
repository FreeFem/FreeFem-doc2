load "medit"

// Initial Problem:
// Resolution of the following EDP:
// -Delta u_s = f on \Omega = { (x,y) | 1 <= sqrt(x^2+y^2) <= 2 }
// -Delta u_1 = f1 on \Omega_1 = { (x,y) | 0.5 <= sqrt(x^2+y^2) <= 1. }
// u = 1 on Gamma
// Null Neumman condition on Gamma_1 and on Gamma_2
// We find the solution u by solving two EDP defined on domain Omega and Omega_1
// This solution is visualize with medit

verbosity=3;

// Mesh
border Gamma(t=0, 2*pi){x=cos(t); y=sin(t); label=1;};
border Gamma1(t=0, 2*pi){x=2*cos(t); y=2*sin(t); label=2;};
border Gamma2(t=0, 2*pi){x=0.5*cos(t); y=0.5*sin(t); label=3;};

mesh Th = buildmesh(Gamma1(40) + Gamma(-40)); //Omega
mesh Th1 = buildmesh(Gamma(40) + Gamma2(-40)); //Omega_1

// Fespace
fespace Vh(Th, P2);
func f = sqrt(x*x + y*y);
Vh us, v;

fespace Vh1(Th1, P2);
func f1 = 10*sqrt(x*x+y*y);
Vh1 u1, v1;

// Macro
macro Grad2(us) [dx(us), dy(us)] // EOM

// Problem
problem Lap2dOmega (us, v, init=false)
	= int2d(Th)(
		  Grad2(v)' * Grad2(us)
	)
	- int2d(Th)(
		  f*v
	)
	+on(1, us=1)
	;

problem Lap2dOmega1 (u1, v1, init=false)
	= int2d(Th1)(
		  Grad2(v1)' * Grad2(u1)
	)
	- int2d(Th1)(
		  f1*v1
	)
	+ on(1, u1=1)
	;

// Solve
Lap2dOmega;
Lap2dOmega1;

// Plot with medit
medit("solution", Th, us, Th1, u1, order=1, save="testsavemedit.solb");
