// Convection thermique 2D

load "iovtk"

// Parameters
int nn = 50;
real L = 2.;
real H = 1.;

real R1 = 0.25;
real R2 = 0.05;

real Rho1 = 1.;
real c1 = 1.;
real Lambda1 = 1.;
real Mu1 = 1.;

real Rho2 = 10.;
real c2 = 10.;
real Lambda2 = 10.;
real Mu2 = 0.;

real g = 0.;

real TD = 0.;

real Tsource = 273.16;

real TotalTime = 2.;
real dt = 1.e-2;

// Mesh
border c0(t=0., 2.*pi){x=L/2.+R1*cos(t); y=H/2.+R2*sin(t); label=1;}

border b1(t=0, L){x=t; y=0; label=2;}
border b2(t=0, H){x=L; y=t; label=3;}
border b3(t=L, 0){x=t; y=H; label=4;}
border b4(t=H, 0){x=0; y=t; label=5;}

int nnL = max(2., nn*L);
int nnH = max(2., nn*H);
int nnR = max(2., nn*2.*pi*R1);
mesh Th = buildmesh(b1(nnL) + b2(nnH) + b3(nnL) + b4(nnH) + c0(nnR));
savevtk("Mesh2D.vtk", Th);

int FluidRegion = Th(0., 0.).region;
int SolidRegion = Th(L/2., H/2.).region;

cout << "FluidRegion = " << FluidRegion << endl;
cout << "SolidRegion = " << SolidRegion << endl;

int[int] Inlet = [5];
int[int] Outlet = [3];
int[int] Wall = [1, 2, 4];

int[int] GammaD = [2, 4];
int[int] GammaN = [0];

// Fespace
fespace Vh(Th, [P2, P2]);
Vh [Ux, Uy];
Vh [Vx, Vy];

fespace Qh(Th, P1);
Qh p;
Qh q;

fespace Uh(Th, P1);
Uh T;
Uh Tp;
Uh U;

// Macro
macro grad(u) [dx(u), dy(u)] //
macro Grad(U) [grad(U#x), grad(U#y)] //
macro Div(U) (dx(U#x) + dy(U#y)) //

// Problem
func Rho = Rho1 + (Rho2-Rho1)*(region==SolidRegion);
func c = c1 + (c2-c1)*(region==SolidRegion);
func Lambda = Lambda1 + (Lambda2-Lambda1)*(region==SolidRegion);
func Mu = Mu1 + (Mu2-Mu1)*(region==SolidRegion);
problem ConvectionThermique (T, U)
	= int2d(Th)(
		  (Rho*c/dt) * T * U
		+ (Rho*c) * [Ux, Uy]' * grad(T) * U
		+ Lambda * grad(T)' * grad(U)
	)
	- int2d(Th)(
		  (Rho*c/dt) * Tp * U
	)
	- int2d(Th, SolidRegion)(
		  Tsource * U
	)
	- int1d(Th, GammaN)(
		  g * U
	)
	+ on(GammaD, T=TD)
	;

// Initialization
// Solve the Stokes problem to obtain the velocity
solve Stokes ([Ux, Uy, p], [Vx, Vy, q])
	= int2d(Th, FluidRegion)(
		  Mu * (Grad(U) : Grad(V))
		- p * Div(V)
		- q * Div(U)
	)
	+ int2d(Th, SolidRegion)(
		  1.e-6 * [Ux, Uy]' * [Vx, Vy]
		+ 1.e-6 * p * q
	)
	+ on(Inlet, Ux=10.*(1.-(y-H/2.)^2/(H/2.)^2), Uy=0)
	+ on(Wall, Ux=0, Uy=0)
	;

plot([Ux, Uy], cmm="Fluid velocity");

T = 0.;

// Iterations
int NbIter = TotalTime/dt;
for (int i = 0; i < NbIter; i++){
	// Update
	Tp = T;
	
	// Solve
	ConvectionThermique;
	
	// Plot
	plot(T, fill=true);
}

// Save
{
	fespace PV(Th, P1);
	PV TT=T;
	PV UUx=Ux, UUy=Uy;
	
	string DataName = "Temperature Velocity";
	int[int] Order = [1, 1];
	
	savevtk("ConvectionThermique2D.vtu", Th, TT, [UUx, UUy, 0], dataname=DataName, order=Order);
}


