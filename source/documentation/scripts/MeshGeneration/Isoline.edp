load "isoline"

real[int,int] xy(3, 1); //to store the isoline points
int[int] be(1); //to store the begin, end couple of lines
{
	mesh Th = square(10, 10);
	fespace Vh(Th, P1);
	Vh u = sqrt(square(x-0.5) + square(y-0.5));
	real iso = 0.2 ;
	real[int] viso = [iso];
	plot(u, viso=viso,Th);//to see the iso line

	int nbc = isoline(Th, u, xy, close=1, iso=iso, beginend=be, smoothing=0.1);
	cout << "Number of the line component = " << nbc << endl;
	cout << "Number of points = " << xy.m << endl;
	cout << "be = " << be << endl;

	// show the lines component
	for (int c = 0; c < nbc; ++c){
		int i0 = be[2*c], i1 = be[2*c+1]-1;
		cout << "Curve " << c << endl;
		for(int i = i0; i <= i1; ++i)
			cout << "x= " << xy(0,i) << " y= " << xy(1,i) << " s= " << xy(2, i) << endl;
		plot([xy(0, i0:i1), xy(1, i0:i1)], wait=true, viso=viso, cmm=" curve "+c);
	}
}

cout << "lenght of last curve = " << xy(2, xy.m-1) << endl;

border Curve0(t=0, 1){
	int c=0; //component 0
	int i0=be[2*c], i1=be[2*c+1]-1;
	P=Curve(xy, i0, i1, t); //Curve 0
	label=1;
}

border Curve1(t=0, 1){
	int c=1; //component 1
	int i0=be[2*c], i1=be[2*c+1]-1;
	P=Curve(xy, i0, i1, t); //Curve 1
	label=1;
}

plot(Curve1(100)); //show curve
mesh Th = buildmesh(Curve1(-100));
plot(Th, wait=true);
