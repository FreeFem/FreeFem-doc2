load "msh3"
load "tetgen"
load "mshmet"
load "medit"

// Parameters
int nn = 6;
int[int] l1111 = [1, 1, 1, 1]; //labels
int[int] l01 = [0, 1];
int[int] l11 = [1, 1];

real errm = 1e-2; //level of error

// Mesh
mesh3 Th3 = buildlayers(square(nn, nn, region=0, label=l1111),
	nn, zbound=[0, 1], labelmid=l11, labelup=l01, labeldown=l01);

Th3 = trunc(Th3, (x<0.5) | (y < 0.5) | (z < 0.5), label=1); //remove the ]0.5,1[^3 cube

// Fespace
fespace Vh(Th3, P1);
Vh u, v, usol, h;

// Macro
macro Grad(u) [dx(u), dy(u), dz(u)] // EOM

// Problem
problem Poisson (u, v, solver=CG)
	= int3d(Th3)(
		  Grad(u)' * Grad(v)
	)
	- int3d(Th3)(
		  1*v
	)
	+ on(1, u=0)
	;

// Loop
for (int ii = 0; ii < 5; ii++){
	// Solve
	Poisson;
	cout << "u min, max = " << u[].min << " "<< u[].max << endl;

	h=0.; //for resizing h[] because the mesh change
	h[] = mshmet(Th3, u, normalization=1, aniso=0, nbregul=1, hmin=1e-3, hmax=0.3, err=errm);
	cout << "h min, max = " << h[].min << " "<< h[].max << " " << h[].n << " " << Th3.nv << endl;
	plot(u, wait=true);

	errm *= 0.8; //change the level of error
	cout << "Th3 " << Th3.nv < " " << Th3.nt << endl;
	Th3 = tetgreconstruction(Th3, switch="raAQ", sizeofvolume=h*h*h/6.); //rebuild mesh
	medit("U-adap-iso-"+ii, Th3, u, wait=true);
}
