load "mshmet"
load "medit"
load "msh3"

// Parameters
real error = 0.01;
func zmin = 0;
func zmax = 1;
int MaxLayer = 10;

// Mesh
border a(t=0, 1.0){x=t; y=0; label=1;};
border b(t=0, 0.5){x=1; y=t; label=2;};
border c(t=0, 0.5){x=1-t; y=0.5; label=3;};
border d(t=0.5, 1){x=0.5; y=t; label=4;};
border e(t=0.5, 1){x=1-t; y=1; label=5;};
border f(t=0.0, 1){x=0; y=1-t; label=6;};
mesh Th = buildmesh(a(6) + b(4) + c(4) + d(4) + e(4) + f(6));
mesh3 Th3 = buildlayers(Th, MaxLayer, zbound=[zmin, zmax]);

// Fespace
fespace Vh3(Th3, P2);
Vh3 u3, v3;

fespace Vh3P1(Th3, P1);
Vh3P1 usol;

// Problem
problem Problem2(u3, v3, solver=sparsesolver)
	= int3d(Th3)(
		  u3*v3*1.0e-10
		+ dx(u3)*dx(v3)
		+ dy(u3)*dy(v3)
		+ dz(u3)*dz(v3)
	)
	- int3d(Th3)(
		  v3
	)
	+on(0, 1, 2, 3, 4, 5, 6, u3=0)
	;

// Solve
Problem2;
cout << u3[].min << " " << u3[].max << endl;

medit("Sol", Th3, u3);

real[int] bb = mshmet(Th3,u3);
cout << "Metric:" << bb << endl;
for (int ii = 0; ii < Th3.nv; ii++)
	usol[][ii] = bb[ii];

medit("Metric", Th3, usol);
