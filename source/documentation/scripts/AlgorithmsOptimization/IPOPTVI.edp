// Solve
//- Delta u = f
//u < g
//u = 0 on Gamma
load "ff-Ipopt";

// Parameters
int nn = 20;
func f = 1.; //rhs function
real r = 0.03, s = 0.1;
func g = r - r/2*exp(-0.5*(square(x-0.5) + square(y-0.5))/square(s));

// Mesh
mesh Th = square(nn, nn);

// Fespace
fespace Vh(Th, P2);
Vh u = 0;
Vh lb = -1.e19;
Vh ub = g;

// Macro
macro Grad(u) [dx(u), dy(u)] //

// Problem
varf vP (u, v)
	= int2d(Th)(
		  Grad(u)'*Grad(v)
	)
	- int2d(Th)(
		  f*v
	)
	;

matrix A = vP(Vh, Vh, solver=CG);
real[int] b = vP(0, Vh);

varf vGamma (u, v) = on(1, 2, 3, 4, u=1);
real[int] onGamma = vGamma(0, Vh);

//warning: the boundary conditions are given with lb and ub on border
ub[] = onGamma ? 0. : ub[];
lb[] = onGamma ? 0. : lb[];

// Solve
IPOPT([A, b], u[], lb=lb[], ub=ub[]);

// Plot
plot(u);
