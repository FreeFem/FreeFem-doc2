load "MUMPS_FreeFem"
//default solver: real-> MUMPS, complex -> MUMPS
load "real_SuperLU_DIST_FreeFem"
default solver: real-> SuperLU_DIST, complex -> MUMPS
load "real_pastix_FreeFem"
//default solver: real-> pastix, complex -> MUMPS

// Solving with pastix
{
	matrix A =
		[[1, 2, 2, 1, 1],
		[ 2, 12, 0, 10 , 10],
		[ 2, 0, 1, 0, 2],
		[ 1, 10, 0, 22, 0.],
		[ 1, 10, 2, 0., 22]];

	real[int] xx = [1, 32, 45, 7, 2], x(5), b(5), di(5);
	b = A*xx;
	cout << "b = " << b << endl;
	cout << "xx = " << xx << endl;

	set(A, solver=sparsesolver, datafilename="ffpastix_iparm_dparm.txt");
	cout << "solve" << endl;
	x = A^-1*b;
	cout << "b = " << b << endl;
	cout << "x = " << endl;
	cout << x << endl;
	di = xx - x;
	if (mpirank == 0){
		cout << "x-xx = " << endl;
		cout << "Linf = " << di.linfty << ", L2 = " << di.l2 << endl;
	}
}

// Solving with SuperLU_DIST
realdefaulttoSuperLUdist();
//default solver: real-> SuperLU_DIST, complex -> MUMPS
{
	matrix A =
		[[1, 2, 2, 1, 1],
		[ 2, 12, 0, 10 , 10],
		[ 2, 0, 1, 0, 2],
		[ 1, 10, 0, 22, 0.],
		[ 1, 10, 2, 0., 22]];

	real[int] xx = [1, 32, 45, 7, 2], x(5), b(5), di(5);
	b = A*xx;
	cout << "b = " << b << endl;
	cout << "xx = " << xx << endl;

	set(A, solver=sparsesolver, datafilename="ffsuperlu_dist_fileparam.txt");
	cout << "solve" << endl;
	x = A^-1*b;
	cout << "b = " << b << endl;
	cout << "x = " << endl;
	cout << x << endl;
	di = xx - x;
	if (mpirank == 0){
		cout << "x-xx = " << endl;
		cout << "Linf = " << di.linfty << ", L2 = " << di.l2 << endl;
	}
}

// Solving with MUMPS
defaulttoMUMPS();
//default solver: real-> MUMPS, complex -> MUMPS
{
	matrix A =
		[[1, 2, 2, 1, 1],
		[ 2, 12, 0, 10 , 10],
		[ 2, 0, 1, 0, 2],
		[ 1, 10, 0, 22, 0.],
		[ 1, 10, 2, 0., 22]];

	real[int] xx = [1, 32, 45, 7, 2], x(5), b(5), di(5);
	b = A*xx;
	cout << "b = " << b << endl;
	cout << "xx = " << xx << endl;

	set(A, solver=sparsesolver, datafilename="ffmumps_fileparam.txt");
	cout << "solving solution" << endl;
	x = A^-1*b;
	cout << "b = " << b << endl;
	cout << "x = " << endl;
	cout << x << endl;
	di = xx - x;
	if (mpirank == 0){
		cout << "x-xx = " << endl;
		cout << "Linf = " << di.linfty << ", L2 " << di.l2 << endl;
	}
}
