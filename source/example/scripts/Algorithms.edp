load "iovtk"

// Parameters
int nerr = 0;
int debugJ = 0;
int debugdJ = 0;
real umax = 0;

// Algorithms tests
{
	func bool stop (int iter, real[int] u, real[int] g){
		cout << " stop = " << iter << " " << u.linfty << " " << g.linfty << endl;
		return g.linfty < 1e-5 || iter > 15;
	}
	// minimization of J(u) = 1./2 * sum (i+1) u_i^2 - b_i
	real[int] b(10), u(10);

	//J
	func real J (real[int] & u){
		real s = 0;
		for (int i = 0; i < u.n; i++)
			s += (i+1)*u[i]*u[i]*0.5 - b[i]*u[i];
		if (debugJ)
			cout << "J = " << s << ", u = " << u[0] << " " << u[1] << endl;
		return s;
	}

	//the gradiant of J (this is a affine version (the RHS is in)
	func real[int] DJ (real[int] &u){
		for (int i = 0; i < u.n; i++)
			u[i] = (i+1)*u[i];
		if (debugdJ)
			cout << "dJ: u = " << u[0] << " " << u[1] << " " << u[2] << endl;
		u -= b;
		if (debugdJ)
			cout << "dJ-b: u = " << u[0] << " " << u[1] << " " << u[2] << endl;
		return u; //return of global variable ok
	}

	//the gradiant of the bilinear part of J (the RHS is remove)
	func real[int] DJ0 (real[int] &u){
		for (int i = 0 ; i < u.n; i++)
			u[i] = (i+1)*u[i];
		if(debugdJ)
			cout << "dJ0: u =" << u[0] << " " << u[1] << " " << u[2] << endl;
		return u; //return of global variable ok
	}

	//erro calculation
	func real error (real[int] & u, real[int] & b){
		real s = 0;
		for (int i = 0; i < u.n; i++)
			s += abs((i+1)*u[i] - b[i]);
		return s;
	}

	func real[int] matId (real[int] &u){ return u; }

	int verb=5; //verbosity
	b = 1.; //set right hand side
	u = 0.; //set initial gest

	LinearCG(DJ, u, eps=1.e-6, nbiter=20, precon=matId, verbosity=verb);
	cout << "LinearGC (Affine) : J(u) = " << J(u) << ", err = " << error(u, b) << endl;
	nerr += !(error(u,b) < 1e-5);
	if(nerr) cout << "sol: u = " << u[0] << " " << u[1] << " " << u[2] << endl;

	b = 1;
	u = 0;
	LinearCG(DJ, u, eps=1.e-15, nbiter=20, precon=matId, verbosity=verb, stop=stop);
	cout << "LinearGC (Affine with stop) : J(u) = " << J(u) << ", err = " << error(u, b) << endl;
	nerr += !(error(u,b) < 1e-5);
	if(nerr) cout << "sol: u = " << u[0] << " " << u[1] << " " << u[2] << endl;

	b = 1;
	u = 0;
	LinearCG(DJ0, u, b, eps=1.e-6, nbiter=20, precon=matId, verbosity=verb);
	cout << "LinearGC (Linear) : J(u) = " << J(u) << ", err = " << error(u, b) << endl;
	nerr += !(error(u,b) < 1e-5);
	if(nerr) cout << "sol: u = " << u[0] << " " << u[1] << " " << u[2] << endl;


	b = 1;
	u = 0;
	AffineGMRES(DJ, u, eps=1.e-6, nbiter=20, precon=matId, verbosity=verb);
	cout << "AffineGMRES (Affine) : J(u) = " << J(u) << ", err = " << error(u, b) << endl;
	nerr += !(error(u,b) < 1e-5);
	if(nerr) cout << "sol: u = " << u[0] << " " << u[1] << " " << u[2] << endl;

	b=1;
	u=0;
	LinearGMRES(DJ0, u, b, eps=1.e-6, nbiter=20, precon=matId, verbosity=verb);
	cout << "LinearGMRES (Linear) : J(u) = " << J(u) << ", err = " << error(u, b) << endl;
	nerr += !(error(u,b) < 1e-5);
	if(nerr) cout << "sol: u = " << u[0] << " " << u[1] << " " << u[2] << endl;


	b=1;
	u=0;
	NLCG(DJ, u, eps=1.e-6, nbiter=20, precon=matId, verbosity=verb);
	cout << "NLCG: J(u) = " << J(u) << ", err = " << error(u, b) << endl;
	nerr += !(error(u,b) < 1e-5);
	if(nerr) cout << "sol: u =" << u[0] << " " << u[1] << " " << u[2] << endl;


	//warning: BFGS use a full matrix of size nxn (where n=u.n)
	b=1;
	u=2;
	BFGS(J, DJ, u, eps=1.e-6, nbiter=20, nbiterline=20);
	cout << "BFGS: J(u) = " << J(u) << ", err = " << error(u, b) << endl;
	assert(error(u,b) < 1e-5);
	if(nerr) cout << "sol: u =" << u[0] << " " << u[1] << " " << u[2] << endl;

	assert(nerr==0);
}

{ // A real non linear test
	// Parameters
	real a = 0.001;
	real eps = 1e-6;
	//f(u) = a*u + u-ln(1+u), f'(u) = a+ u/(1+u), f''(u) = 1/(1+u)^2
	func real f(real u) { return u*a+u-log(1+u); }
	func real df(real u) { return a+u/(1+u); }
	func real ddf(real u) { return 1/((1+u)*(1+u)); }

	// Mesh
	mesh Th = square(20, 20);

	// Fespace
	fespace Vh(Th, P1);
	Vh b = 1;
	Vh u = 0;

	fespace Ph(Th, P0);
	Ph alpha; //store df(|nabla u|^2)

	// The functionnal J
	//J(u) = 1/2 int_Omega f(|nabla u|^2) - int_Omega u b
	func real J (real[int] & u){
		Vh w;
		w[] = u;
		real r = int2d(Th)(0.5*f(dx(w)*dx(w) + dy(w)*dy(w)) - b*w);
		cout << "J(u) = " << r << " " << u.min << " " << u.max << endl;
		return r;
	}

	// The gradiant of J
	func real[int] dJ (real[int] & u){
		Vh w;
		w[] = u;
		alpha = df(dx(w)*dx(w) + dy(w)*dy(w));
		varf au (uh, vh)
			= int2d(Th)(
				  alpha*(dx(w)*dx(vh) + dy(w)*dy(vh))
				- b*vh
			)
			+ on(1, 2, 3, 4, uh=0)
			;

		u = au(0, Vh);
		return u; //warning: no return of local array
	}

	// Problem
	alpha = df(dx(u)*dx(u) + dy(u)*dy(u));
	varf alap (uh, vh)
		= int2d(Th)(
			  alpha*(dx(uh)*dx(vh) + dy(uh)*dy(vh))
		)
		+ on(1, 2, 3, 4, uh=0)
		;

	varf amass(uh, vh)
		= int2d(Th)(
			  uh*vh
		)
		+ on(1, 2, 3, 4, uh=0)
		;

	matrix Amass = amass(Vh, Vh, solver=CG);
	matrix Alap= alap(Vh, Vh, solver=Cholesky, factorize=1);

	// Preconditionner
	func real[int] C(real[int] & u){
		real[int] w = u;
		u = Alap^-1*w;
		return u; //warning: no return of local array variable
	}

	// Solve
	int conv=0;
	for(int i = 0; i < 20; i++){
		conv = NLCG(dJ, u[], nbiter=10, precon=C, veps=eps, verbosity=5);
		if (conv) break;

		alpha = df(dx(u)*dx(u) + dy(u)*dy(u));
		Alap = alap(Vh, Vh, solver=Cholesky, factorize=1);
		cout << "Restart with new preconditionner " << conv << ", eps =" << eps << endl;
	}

	// Plot
	plot (u, wait=true, cmm="solution with NLCG");
	umax = u[].max;

	Vh sss= df(dx(u)*dx(u) + dy(u)*dy(u));
	plot (sss, fill=true, value=true);

	int[int] Order = [1, 1];
	savevtk("Algorithms.vtu", Th, u, sss, dataname="u sss", order=Order);
}

assert(nerr==0);
