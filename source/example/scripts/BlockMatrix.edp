load "iovtk"

// Parameters
real f1 = 1.;
real f2 = 1.5;

// Mesh
mesh Th1 = square(10, 10);
mesh Th2 = square(10, 10, [1+x, -1+y]);
plot(Th1, Th2);

// Fespace
fespace Uh1(Th1, P1);
Uh1 u1;

fespace Uh2(Th2, P2);
Uh2 u2;

// Macro
macro grad(u) [dx(u), dy(u)] //

// Problem
varf vPoisson1 (u, v)
	= int2d(Th1)(
		  grad(u)' * grad(v)
	)
	- int2d(Th1)(
		  f1 * v
	)
	+ on(1, 2, 3, 4, u=0)
	;

varf vPoisson2 (u, v)
	= int2d(Th2)(
		  grad(u)' * grad(v)
	)
	- int2d(Th2)(
		  f1 * v
	)
	+ on(1, 2, 3, 4, u=0)
	;
matrix<real> Poisson1 = vPoisson1(Uh1, Uh1);
real[int] Poisson1b = vPoisson1(0, Uh1);

matrix<real> Poisson2 = vPoisson2(Uh2, Uh2);
real[int] Poisson2b = vPoisson2(0, Uh2);

//block matrix
matrix<real> G = [[Poisson1, 0], [0, Poisson2]];
set(G, solver=sparsesolver);

//block right hand side
real[int] Gb = [Poisson1b, Poisson2b];

// Solve
real[int] sol = G^-1 * Gb;

// Dispatch
[u1[], u2[]] = sol;

// Plot
plot(u1, u2);

int[int] Order = [1];
savevtk("BlockMatrix1.vtu", Th1, u1, dataname="u", order=Order);

fespace PV(Th2, P1);
PV uu2 = u2;
savevtk("BlockMatrix2.vtu", Th2, u2, dataname="u", order=Order);
