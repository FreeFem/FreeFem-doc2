real[int] tab(10), tab1(10); //2 array of 10 real
//real[int] tab2; //bug: array with no size

tab = 1.03; //set all the array to 1.03
tab[1] = 2.15;

cout << "tab: " << tab << endl;
cout << "min: " << tab.min << endl;
cout << "max: " << tab.max << endl;
cout << "sum: " << tab.sum << endl;

tab.resize(12); //change the size of array tab to 12 with preserving first value
tab(10:11) = 3.14; //set values 10 & 11
cout << "resized tab: " << tab << endl;

tab.sort ; //sort the array tab
cout << "sorted tab:" << tab << endl;

real[string] tt; //array with string index
tt["+"] = 1.5;
cout << "tt[\"a\"] = " << tt["a"] << endl;
cout << "tt[\"+\"] = " << tt["+"] << endl;

real[int] a(5), b(5), c(5), d(5);
a = 1;
b = 2;
c = 3;
a[2] = 0;
d = ( a ? b : c ); //for i = 0, n-1 : d[i] = a[i] ? b[i] : c[i]
cout << " d = ( a ? b : c ) is " << d << endl;
d = ( a ? 1 : c ); //for i = 0, n-1: d[i] = a[i] ? 1 : c[i]
d = ( a ? b : 0 ); //for i = 0, n-1: d[i] = a[i] ? b[i] : 0
d = ( a ? 1 : 0 ); //for i = 0, n-1: d[i] = a[i] ? 0 : 1

int[int] ii(0:d.n-1); //set array ii to 0, 1, ..., d.n-1
d = -1:-5; //set d to -1, -2, ..., -5

sort(d, ii); //sort array d and ii in parallel
cout << "d: " << d << endl;
cout << "ii: " << ii << endl;


{
	int[int] A1(2:10); //2, 3, 4, 5, 6, 7, 8, 9, 10
	int[int] A2(2:3:10); //2, 5, 8
	cout << "A1(2:10): " << A1 << endl;
	cout << "A2(2:3:10): " << A1 << endl;
	A1 = 1:2:5;
	cout << "1:2:5 => " << A1 << endl;
}
{
	real[int] A1(2:10); //2, 3, 4, 5, 6, 7, 8, 9, 10
	real[int] A2(2:3:10); //2, 5, 8
	cout << "A1(2:10): " << A1 << endl;
	cout << "A2(2:3:10): " << A1 << endl;
	A1 = 1.:0.5:3.999;
	cout << "1.:0.5:3.999 => " << A1 << endl;
}
{
	complex[int] A1(2.+0i:10.+0i); //2, 3, 4, 5, 6, 7, 8, 9, 10
	complex[int] A2(2.:3.:10.); //2, 5, 8
	cout << " A1(2.+0i:10.+0i): " << A1 << endl;
	cout << " A2(2.:3.:10.)= " << A2 << endl;
	cout << " A1.re real part array: " << A1.re << endl ;
	// he real part array of the complex array
	cout << " A1.im imag part array: " << A1.im << endl ;
	//the imaginary part array of the complex array
}

// Integer array operators
{
	int N = 5;
	real[int] a(N), b(N), c(N);
	a = 1;
	a(0:4:2) = 2;
	a(3:4) = 4;
	cout << "a: " << a << endl;
	b = a + a;
	cout <<"b = a + a: " << b << endl;
	b += a;
	cout <<"b += a: " << b << endl;
	b += 2*a;
	cout <<"b += 2*a: " << b << endl;
	b /= 2;
	cout <<" b /= 2: " << b << endl;
	b .*= a; // same as b = b .* a
	cout << "b .*= a: " << b << endl;
	b ./= a; //same as b = b ./ a
	cout << "b ./= a: " << b << endl;
	c = a + b;
	cout << "c = a + b: " << c << endl;
	c = 2*a + 4*b;
	cout << "c = 2*a + 4b: " << c << endl;
	c = a + 4*b;
	cout << "c = a + 4b: " << c << endl;
	c = -a + 4*b;
	cout << "c = -a + 4b: " << c << endl;
	c = -a - 4*b;
	cout << "c = -a - 4b: " << c << endl;
	c = -a - b;
	cout << "c = -a -b: " << c << endl;

	c = a .* b;
	cout << "c = a .* b: " << c << endl;
	c = a ./ b;
	cout << "c = a ./ b: " << c << endl;
	c = 2 * b;
	cout << "c = 2 * b: " << c << endl;
	c = b * 2;
	cout << "c = b * 2: " << c << endl;

	//this operator do not exist
	//c = b/2;
	//cout << "c = b / 2: " << c << endl;

	//Array methods
	cout << "||a||_1 = " << a.l1 << endl;
	cout << "||a||_2 = " << a.l2 << endl;
	cout << "||a||_infty = " << a.linfty << endl;
	cout << "sum a_i = " << a.sum << endl;
	cout << "max a_i = " << a.max << " a[ " << a.imax << " ] = " << a[a.imax] << endl;
	cout << "min a_i = " << a.min << " a[ " << a.imin << " ] = " << a[a.imin] << endl;

	cout << "a' * a = " << (a'*a) << endl;
	cout << "a quantile 0.2 = " << a.quantile(0.2) << endl;

	//Array mapping
	int[int] I = [2, 3, 4, -1, 3];
	b = c = -3;
	b = a(I); //for (i = 0; i < b.n; i++) if (I[i] >= 0) b[i] = a[I[i]];
	c(I) = a; //for (i = 0; i < I.n; i++) if (I[i] >= 0) C(I[i]) = a[i];
	cout << "b = a(I) : " << b << endl;
	cout << "c(I) = a " << c << endl;
	c(I) += a; //for (i = 0; i < I.n; i++) if (I[i] >= 0) C(I[i]) += a[i];
	cout << "b = a(I) : " << b << endl;
	cout << "c(I) = a " << c << endl;

}

{
	// Array versus matrix
	int N = 3, M = 4;

	real[int, int] A(N, M);
	real[int] b(N), c(M);
	b = [1, 2, 3];
	c = [4, 5, 6, 7];

	complex[int, int] C(N, M);
	complex[int] cb = [1, 2, 3], cc = [10i, 20i, 30i, 40i];

	b = [1, 2, 3];

	int [int] I = [2, 0, 1];
	int [int] J = [2, 0, 1, 3];

	A = 1; //set all the matrix
	A(2, :) = 4; //the full line 2
	A(:, 1) = 5; //the full column 1
	A(0:N-1, 2) = 2; //set the column 2
	A(1, 0:2) = 3; //set the line 1 from 0 to 2

	cout << "A = " << A << endl;

	//outer product
	C = cb * cc';
	C += 3 * cb * cc';
	C -= 5i * cb * cc';
	cout << "C = " << C << endl;

	//this transforms an array into a sparse matrix
	matrix B;
	B = A;
	B = A(I, J); //B(i, j) = A(I(i), J(j))
	B = A(I^-1, J^-1); //B(I(i), J(j)) = A(i,j)

	//outer product
	A = 2. * b * c';
	cout << "A = " << A << endl;
	B = b*c'; //outer product B(i, j) = b(i)*c(j)
	B = b*c'; //outer product B(i, j) = b(i)*c(j)
	B = (2*b*c')(I, J); //outer product B(i, j) = b(I(i))*c(J(j))
	B = (3.*b*c')(I^-1,J^-1); //outer product B(I(i), J(j)) = b(i)*c(j)
	cout << "B = (3.*b*c')(I^-1,J^-1) = " << B << endl;

	real[int] AV(A.n*A.m);
	for [i, j, aij: A]
		AV[i+A.n*j] = aij;

	//row and column of the maximal coefficient of A
	int i, j, ii, jj;
	ijmax(A, ii, jj);

	i = A.imax;
	j = A.jmax;

	cout << "Max " << i << " " << j << ", = " << A.max << endl;

	//row and column of the minimal coefficient of A
	ijmin(A, i, j);

	ii = A.imin;
	jj = A.jmin;

	cout << "Min " << ii << " " << jj << ", = " << A.min << endl;
}
