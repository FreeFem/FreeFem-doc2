//  Parameters
verbosity = 0; //to remove all default output
real theta = 4.*pi/3.;
real a=1.; //the length of the semimajor axis
real b=1.; //the length of the semiminor axis
func f = -4*(cos(x^2+y^2-1) - (x^2+y^2)*sin(x^2+y^2-1));
func phiexact = sin(x^2 + y^2 - 1);

// Mesh
border Gamma1(t=0., theta){x=a*cos(t); y=b*sin(t);}
border Gamma2(t=theta, 2.*pi){x=a*cos(t); y=b*sin(t);}

// Error loop
real[int] L2error(2); //an array of two values
for(int n = 0; n < 2; n++){
	// Mesh
	mesh Th = buildmesh(Gamma1(20*(n+1)) + Gamma2(10*(n+1)));

	// Fespace
	fespace Vh(Th, P2);
	Vh phi, w;

	// Solve
	solve Laplace(phi, w)
		= int2d(Th)(
			  dx(phi)*dx(w)
			+ dy(phi)*dy(w)
		)
		- int2d(Th)(
			  f*w
		)
		- int1d(Th, Gamma2)(
			  2*w
		)
		+ on(Gamma1,phi=0)
		;

	// Plot
	plot(Th, phi, wait=true, ps="Membrane.eps");

	// Error
	L2error[n] = sqrt(int2d(Th)((phi-phiexact)^2));
}

// Display loop
for(int n = 0; n < 2; n++)
	cout << "L2error " << n << " = " << L2error[n] << endl;

// Convergence rate
cout << "convergence rate = "<< log(L2error[0]/L2error[1])/log(2.) << endl;
