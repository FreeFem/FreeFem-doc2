// Parameters
real kc2 = 19.4256;
func g = y*(1.-y);

// Mesh
border a0(t=0., 1.){x=5.; y=1.+2.*t;}
border a1(t=0., 1.){x=5.-2.*t; y=3.;}
border a2(t=0., 1.){x=3.-2.*t; y=3.-2.*t;}
border a3(t=0., 1.){x=1.-t; y=1.;}
border a4(t=0., 1.){x=0.; y=1.-t;}
border a5(t=0., 1.){x=t; y=0.;}
border a6(t=0., 1.){x=1.+4.*t; y=t;}

mesh Th = buildmesh(a0(20) + a1(20) + a2(20)
	+ a3(20) + a4(20) + a5(20) + a6(20));

// Fespace
fespace Vh(Th, P1);
Vh u, v;

// Parameters
real sigma = 20; //value of the shift

// Problem
// OP = A - sigma B ; // The shifted matrix
varf op(u1, u2)
	= int2d(Th)(
		  dx(u1)*dx(u2)
		+ dy(u1)*dy(u2)
		- sigma* u1*u2
	)
	;

varf b([u1], [u2])
	= int2d(Th)(
		u1*u2
	)
	; // No Boundary condition see note \ref{note BC EV}

matrix OP = op(Vh, Vh, solver=Crout, factorize=1);
matrix B = b(Vh, Vh, solver=CG, eps=1e-20);

// Eigen values
int nev=2; // Number of requested eigenvalues near sigma

real[int] ev(nev);	// To store the nev eigenvalue
Vh[int] eV(nev);	// To store the nev eigenvector

int k=EigenValue(OP, B, sym=true, sigma=sigma, value=ev, vector=eV,
	tol=1e-10, maxit=0, ncv=0);

cout << ev(0) << " 2 eigen values " << ev(1) << endl;
v = eV[0];
plot(v, wait=true, ps="eigen.eps");
