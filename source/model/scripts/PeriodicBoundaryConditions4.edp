load "msh3"
load "tetgen"
load "medit"

// Parameters
real hs = 0.1; //mesh size on sphere
int[int] N = [20, 20, 20];
real [int,int] B = [[-1, 1], [-1, 1], [-1, 1]];
int [int,int] L = [[1, 2], [3, 4], [5, 6]];

real x0 = 0.3, y0 = 0.4, z0 = 06;
func f = sin(x*2*pi+x0)*sin(y*2*pi+y0)*sin(z*2*pi+z0);

// Mesh
bool buildTh = 0;
mesh3 Th;
try { //a way to build one time the mesh or read it if the file exist
	Th = readmesh3("Th-hex-sph.mesh");
}
catch (...){
	buildTh = 1;
}

if (buildTh){
	include "MeshSurface.idp"

	// Surface Mesh
	mesh3 ThH = SurfaceHex(N, B, L, 1);
	mesh3 ThS = Sphere(0.5, hs, 7, 1);

	mesh3 ThHS = ThH + ThS;

	real voltet = (hs^3)/6.;
	real[int] domain = [0, 0, 0, 1, voltet, 0, 0, 0.7, 2, voltet];
	Th = tetg(ThHS, switch="pqaAAYYQ", nbofregions=2, regionlist=domain);

	savemesh(Th, "Th-hex-sph.mesh");
}

// Fespace
fespace Ph(Th, P0);
Ph reg = region;
cout << " centre = " << reg(0,0,0) << endl;
cout << " exterieur = " << reg(0,0,0.7) << endl;

verbosity = 50;
fespace Vh(Th, P1, periodic=[[3, x, z], [4, x, z], [1, y, z], [2, y, z], [5, x, y], [6, x, y]]);
verbosity = 1;
Vh uh,vh;

// Macro
macro Grad(u) [dx(u),dy(u),dz(u)] // EOM

// Problem
problem Poisson (uh, vh)
	= int3d(Th, 1)(
		  Grad(uh)'*Grad(vh)*100
	)
	+ int3d(Th, 2)(
		  Grad(uh)'*Grad(vh)*2
	)
	+ int3d(Th)(
		  vh*f
	)
;

// Solve
Poisson;

// Plot
plot(uh, wait=true, nbiso=6);
medit("uh", Th, uh);
