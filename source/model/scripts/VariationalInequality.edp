load "medit"

// Parameters
real eps = 1e-5;
real c = 1000; //penalty parameter of the algoritm
real tgv = 1e30; //a huge value for exact penalization
func f = 1; //right hand side function
func fd = 0; //Dirichlet boundary condition function

// Mesh
mesh Th = square(20, 20);

// Fespace
fespace Vh(Th, P1);
int n = Vh.ndof; //number of degree of freedom
Vh uh, uhp; //u^n+1 and u^n
Vh Ik; //to define the set where the containt is reached.
Vh g = 0.05; //discret function g
Vh lambda = 0;

// Problem
varf a (uh, vh)
	= int2d(Th)(
		  dx(uh)*dx(vh)
		+ dy(uh)*dy(vh)
	)
	- int2d(Th)(
		  f*vh
	)
	+ on(1, 2, 3, 4, uh=fd)
	;

//the mass Matrix construction
varf vM (uh, vh) = int2d(Th)(uh*vh);

//two versions of the matrix of the problem
matrix A = a(Vh, Vh, tgv=tgv, solver=CG); //one changing
matrix AA = a(Vh, Vh, solver=CG); //one for computing residual

matrix M = vM(Vh, Vh); //to do a fast computing of L^2 norm : sqrt(u'*(w=M*u))

real[int] Aiin(n);
real[int] Aii = A.diag; //get the diagonal of the matrix
real[int] rhs = a(0, Vh, tgv=tgv);

// Initialization
Ik = 0;
uhp = -tgv;

// Loop
for(int iter = 0; iter < 100; ++iter){
	// Update
	real[int] b = rhs; //get a copy of the Right hand side
	real[int] Ak(n); //the complementary of Ik ( !Ik = (Ik-1))
	Ak = 1.; Ak -= Ik[];
	//adding new locking condition on b and on the diagonal if (Ik ==1 )
	b = Ik[] .* g[]; b *= tgv; b -= Ak .* rhs;
	Aiin = Ik[] * tgv; Aiin += Ak .* Aii; //set Aii= tgv i in Ik
	A.diag = Aiin; //set the matrix diagonal
	set(A, solver=CG); //important to change preconditioning for solving

	// Solve
	uh[] = A^-1* b; //solve the problem with more locking condition

	// Residual
	lambda[] = AA * uh[]; //compute the residual (fast with matrix)
	lambda[] += rhs; //remark rhs = -\int f v

	Ik = (lambda + c*( g- uh)) < 0.; //the new locking value

	// Plot
	plot(Ik, wait=true, cmm=" lock set ", value=true, fill=true);
	plot(uh, wait=true, cmm="uh");

	// Error
	//trick to compute L^2 norm of the variation (fast method)
	real[int] diff(n), Mdiff(n);
	diff = uh[] - uhp[];
	Mdiff = M*diff;
	real err = sqrt(Mdiff'*diff);
	cout << "|| u_{k=1} - u_{k} ||_2 = " << err << endl;

	// Stop test
	if(err < eps) break;

	// Update
	uhp[] = uh[];
}

// Plot
medit("uh", Th, uh);
