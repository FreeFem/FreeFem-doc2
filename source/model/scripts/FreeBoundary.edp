// Parameters
real L = 10; //length
real hr = 2.1; //left height
real hl = 0.35; //right height
int n = 4;

real q = 0.02; //incoming flow
real K = 0.5; //permeability

// Mesh
border a(t=0, L){x=t; y=0;}; //bottom: Gamma_a
border b(t=0, hr){x=L; y=t;}; //right: Gamma_b
border f(t=L, 0){x=t; y=t*(hr-hl)/L+hl;}; //free surface: Gamma_f
border d(t=hl, 0){x=0; y=t;}; // left: Gamma_d
mesh Th = buildmesh(a(10*n) + b(6*n) + f(8*n) + d(3*n));
plot(Th);

// Fespace
fespace Vh(Th, P1);
Vh u, v;
Vh uu, vv;

// Problem
problem Pu (u, uu, solver=CG)
	= int2d(Th)(
		  dx(u)*dx(uu)
		+ dy(u)*dy(uu)
	)
	+ on(b, f, u=y)
	;

problem Pv (v, vv, solver=CG)
	= int2d(Th)(
		  dx(v)*dx(vv)
		+ dy(v)*dy(vv)
	)
	+ on(a, v=0)
	+ int1d(Th, f)(
		  vv*((q/K)*N.y - (dx(u)*N.x + dy(u)*N.y))
	)
	;

// Loop
int j = 0;
real errv = 1.;
real erradap = 0.001;
while (errv > 1e-6){
	// Update
	j++;

	// Solve
	Pu;
	Pv;

	// Plot
	plot(Th, u, v);

	// Error
	errv = int1d(Th, f)(v*v);

	// Movemesh
	real coef = 1.;
	real mintcc = checkmovemesh(Th, [x, y])/5.;
	real mint = checkmovemesh(Th, [x, y-v*coef]);

	if (mint < mintcc || j%10==0){ //mesh too bad => remeshing
		Th = adaptmesh(Th, u, err=erradap);
		mintcc = checkmovemesh(Th, [x, y])/5.;
	}

	while (1){
		real mint = checkmovemesh(Th, [x, y-v*coef]);

		if (mint > mintcc) break;

		cout << "min |T| = " << mint << endl;
		coef /= 1.5;
	}

	Th=movemesh(Th, [x, y-coef*v]);

	// Display
	cout << endl << j << " - errv = " << errv << endl;
}

// Plot
plot(Th);
plot(u, wait=true);
