include "cube.idp"

// Parameters
int[int] Nxyz = [20, 5, 5];
real [int, int] Bxyz = [[0., 5.], [0., 1.], [0., 1.]];
int [int, int] Lxyz = [[1, 2], [2, 2], [2, 2]];

real E = 21.5e4;
real sigma = 0.29;
real gravity = -0.05;

// Mesh
mesh3 Th = Cube(Nxyz, Bxyz, Lxyz);

// Fespace
fespace Vh(Th, [P1, P1, P1]);
Vh [u1, u2, u3], [v1, v2, v3];

// Macro
real sqrt2 = sqrt(2.);
macro epsilon(u1, u2, u3) [
	dx(u1), dy(u2), dz(u3),
	(dz(u2) + dy(u3))/sqrt2,
	(dz(u1) + dx(u3))/sqrt2,
	(dy(u1) + dx(u2))/sqrt2] //
macro div(u1, u2, u3) (dx(u1) + dy(u2) + dz(u3)) //

// Problem
real mu = E/(2*(1+sigma));
real lambda = E*sigma/((1+sigma)*(1-2*sigma));

solve Lame ([u1, u2, u3], [v1, v2, v3])
	= int3d(Th)(
		  lambda*div(u1, u2, u3)*div(v1, v2, v3)
		+ 2.*mu*( epsilon(u1, u2, u3)'*epsilon(v1, v2, v3) )
	)
	- int3d(Th)(
		  gravity*v3
	)
	+ on(1, u1=0, u2=0, u3=0)
	;

// Display
real dmax = u1[].max;
cout << "max displacement = " << dmax << endl;

// Movemesh
real coef = 0.1/dmax;
int[int] ref2 = [1, 0, 2, 0];
mesh3 Thm = movemesh3(Th, transfo=[x+u1*coef, y+u2*coef, z+u3*coef], label=ref2);
Thm = change(Thm, label=ref2);

// Plot
plot(Th, Thm, wait=true, cmm="coef amplification = "+coef);
