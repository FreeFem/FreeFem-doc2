// Parameters
int bottombeam = 2; //label of bottombeam
real E = 21.5;
real sigma = 0.29;
real gravity = -0.05;
real coef = 0.2;

// Mesh (solid)
border a(t=2, 0){x=0; y=t; label=1;}
border b(t=0, 10){x=t; y=0; label=bottombeam;}
border c(t=0, 2){x=10; y=t; label=1;}
border d(t=0, 10){x=10-t; y=2; label=3;}
mesh th = buildmesh(b(20) + c(5) + d(20) + a(5));

// Fespace (solid)
fespace Vh(th, P1);
Vh uu, w, vv, s;

// Mesh (fluid)
border e(t=0, 10){x=t; y=-10; label= 1;}
border f(t=0, 10){x=10; y=-10+t ; label= 1;}
border g(t=0, 10){x=0; y=-t; label= 2;}
border h(t=0, 10){x=t; y=vv(t,0)*( t>=0.001 )*(t <= 9.999); label=3;}
mesh sh = buildmesh(h(-20) + f(10) + e(10) + g(10));
plot(sh, wait=true);

// Fespace (fluid)
fespace Xh(sh, P2);
Xh u1, u2;
Xh bc1;
Xh brhs;
Xh bcx=0, bcy=1;

fespace Mh(sh, P1);
Mh p, ppp;

// Macro
real sqrt2 = sqrt(2.);
macro epsilon(u1, u2) [dx(u1), dy(u2), (dy(u1)+dx(u2))/sqrt2] //
macro div(u1, u2) (dx(u1) + dy(u2)) //

// Problem (solid)
real mu = E/(2*(1+sigma));
real lambda = E*sigma/((1+sigma)*(1-2*sigma));
solve Elasticity([uu, vv], [w, s])
	= int2d(th)(
		  lambda*div(w,s)*div(uu,vv)
		+ 2.*mu*(epsilon(w,s)'*epsilon(uu,vv))
	)
	+ int2d(th)(
		- gravity*s
	)
	+ on(1, uu=0, vv=0)
	;

plot([uu, vv], wait=true);
mesh th1 = movemesh(th, [x+uu, y+vv]);
plot(th1, wait=true);

// Problem (fluid)
varf bx (u1, q) = int2d(sh)(-(dx(u1)*q));
varf by (u1, q) = int2d(sh)(-(dy(u1)*q));
varf Lap (u1, u2)
	= int2d(sh)(
		  dx(u1)*dx(u2)
		+ dy(u1)*dy(u2)
	)
	+ on(2, u1=1)
	+ on(1, 3, u1=0)
	;

bc1[] = Lap(0, Xh);

matrix A = Lap(Xh, Xh, solver=CG);
matrix Bx = bx(Xh, Mh);
matrix By = by(Xh, Mh);


func real[int] divup (real[int] & pp){
	int verb = verbosity;
	verbosity = 0;
	brhs[] = Bx'*pp;
	brhs[] += bc1[] .*bcx[];
	u1[] = A^-1*brhs[];
	brhs[] = By'*pp;
	brhs[] += bc1[] .*bcy[];
	u2[] = A^-1*brhs[];
	ppp[] = Bx*u1[];
	ppp[] += By*u2[];
	verbosity = verb;
	return ppp[];
}

// Coupling loop
for(int step = 0; step < 10; ++step){
	// Solve (fluid)
	LinearCG(divup, p[], eps=1.e-3, nbiter=50);
	divup(p[]);

	// Forces
	Vh sigma11, sigma22, sigma12;
	Vh uu1=uu, vv1=vv;

	sigma11([x+uu, y+vv]) = (2*dx(u1) - p);
	sigma22([x+uu, y+vv]) = (2*dy(u2) - p);
	sigma12([x+uu, y+vv]) = (dx(u1) + dy(u2));

	// Solve (solid)
	solve Elasticity2 ([uu, vv], [w, s], init=step)
	= int2d(th)(
		  lambda*div(w,s)*div(uu,vv)
		+ 2.*mu*(epsilon(w,s)'*epsilon(uu,vv))
	)
	+ int2d(th)(
		- gravity*s
	)
	+ int1d(th, bottombeam)(
		- coef*(sigma11*N.x*w + sigma22*N.y*s + sigma12*(N.y*w+N.x*s))
	)
	+ on(1, uu=0, vv=0)
	;

	// Plot
	plot([uu, vv], wait=1);

	// Error
	real err = sqrt(int2d(th)((uu-uu1)^2 + (vv-vv1)^2));
	cout << "Erreur L2 = " << err << endl;

	// Movemesh
	th1 = movemesh(th, [x+0.2*uu, y+0.2*vv]);
	plot(th1, wait=true);
}
