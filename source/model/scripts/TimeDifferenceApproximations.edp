// Parameters
real tau = 0.1;
real theta = 0.;

// Mesh
mesh Th = square(12, 12);

// Fespace
fespace Vh(Th, P1);
Vh u, v, oldU;
Vh f1, f0;

fespace Ph(Th, P0);
Ph h = hTriangle; // mesh sizes for each triangle

// Function
func real f (real t){
	return x^2*(x-1)^2 + t*(-2 + 12*x - 11*x^2 - 2*x^3 + x^4);
}

// File
ofstream out("err02.csv"); //file to store calculations
out << "mesh size = " << h[].max << ", time step = " << tau << endl;
for (int n = 0; n < 5/tau; n++)
	out << n*tau << ",";
out << endl;

// Problem
problem aTau (u, v)
	= int2d(Th)(
		  u*v
		+ theta*tau*(dx(u)*dx(v) + dy(u)*dy(v) + u*v)
	)
	- int2d(Th)(
		  oldU*v
		- (1-theta)*tau*(dx(oldU)*dx(v) + dy(oldU)*dy(v) + oldU*v)
	)
	- int2d(Th)(
		  tau*(theta*f1 + (1-theta)*f0)*v
	)
	;

// Theta loop
while (theta <= 1.0){
	real t = 0;
	real T = 3;
	oldU = 0;
	out << theta << ",";
	for (int n = 0; n < T/tau; n++){
		// Update
		t = t + tau;
		f0 = f(n*tau);
		f1 = f((n+1)*tau);

		// Solve
		aTau;
		oldU = u;

		// Plot
		plot(u);

		// Error
		Vh uex = t*x^2*(1-x)^2; //exact solution = tx^2(1-x)^2
		Vh err = u - uex; // err = FE-sol - exact
		out << abs(err[].max)/abs(uex[].max) << ",";
	}
	out << endl;
	theta = theta + 0.1;
}
