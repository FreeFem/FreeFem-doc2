// check all commands in types.md
include "cube.idp"

cout << "int" << endl;
// int
{
	int i = 0;
	cout << "i = " << i << endl;
}

cout << "bool" << endl;
// bool
{
	bool b = true;
	cout << "b = " << b << endl;
}

cout << "real" << endl;
// real
{
	real r = 0.;
	cout << "r = " << r << endl;
}

cout << "complex" << endl;
// complex
{
	complex c = 0. + 1i;
	cout << "c = " << c << endl;
}

cout << "string" << endl;
// string
{
	string s = "this is a string";
	cout << "s = " << s << endl;
}

cout << "border" << endl;
// border
{
	border b(t=0., 1.){x=cos(2.*pi*t); y=sin(2.*pi*t);}
	plot(b(10));
}
{
	border b(t=0., 1.){x=cos(2.*pi*t); y=sin(2.*pi*t); label=1;}
	plot(b(10));
}
{
	border b(t=0., 1.){real tt=2.*pi*t; x=cos(tt); y=sin(tt);}
	plot(b(10));
}
{
	int nn = 20;
	real[int] vectorX(nn), vectorY(nn);
	for (int i = 0; i < nn; i++){
		real t = i / (nn-1.);
		vectorX[i] = cos(2.*pi*t);
		vectorY[i] = sin(2.*pi*t);
	}
	border b(t=0, vectorX.n-1){P.x=vectorX[t]; P.y=vectorY[t];}
	plot(b(vectorX.n-1));
}

cout << "mesh" << endl;
// mesh
{
	mesh Th = square(10, 10);
	plot(Th);
}

cout << "mesh3" << endl;
// mesh3
{
	mesh3 Th = cube(10, 10, 10);
	plot(Th);
}

cout << "fespace" << endl;
// fespace
{
	mesh Th = square(10, 10);
	fespace Uh(Th, P1);
	fespace UPh(Th, [P2, P2, P1]);

	cout << "ndof Uh = " << Uh.ndof << endl;
	cout << "ndof UPh = " << UPh.ndof << endl;
}
{
	mesh3 Th = cube(10, 10, 10);
	fespace Uh(Th, P1);
	Uh u;

	fespace UPh(Th, [P2, P2, P1]);
	UPh [Ux, Uy, p];
}

cout << "macro" << endl;
// macro
macro grad(u) [dx(u), dy(u)] //
macro Grad(U) [grad(U#x), grad(U#y)] //

cout << "function" << endl;
// func
{
	func f = x^2 + y^2;
	cout << "f(0, 0) = " << f << endl;
}
{
	func real f (real var){
		return x^2 + y^2 + var^2;
	}
	cout << "f(0, 0, 1) = " << f(1) << endl;
}

cout << "problem" << endl;
// problem
{
	mesh Th = square(10, 10);

	fespace Uh(Th, P1);
	Uh u, uh;
	func real[int] P(real[int] &xx){
		return xx;
	}

	problem Laplacian (u, uh, solver=CG, eps=1.e-6, init=1, precon=P, tgv=1, tolpivot=1.e-6, tolpivotsym=1.e-1, strategy=0)
		= int2d(Th)(
			  u * uh
		)
		+ on(1, u=0)
		;

	solve Laplacian2 (u, uh, solver=CG, eps=1.e-6, init=1, precon=P, tgv=1, tolpivot=1.e-6, tolpivotsym=1.e-1, strategy=0)
		= int2d(Th)(
			  u * uh
		)
		+ on(1, u=0)
		;
	plot(u);
}

cout << "array" << endl;
// array
{
	real[int] Ai = [1, 1, 0, 0];
	real[string] As = [1, 1, 0, 0];

	int ArraySize = Ai.n;
	cout << "size Ai = " << ArraySize << endl;

	real[int, int] Aii = [[1, 1], [0, 0]];

	int ArraySize1 = Aii.n;
	int ArraySize2 = Aii.m;

	cout << "size Aii = " << ArraySize1 << "\t" << ArraySize2 << endl;

	real ArrayMin = Aii.min;
	real ArrayMax = Aii.max;

	cout << "min/max Aii = " << ArrayMin << "\t" << ArrayMax << endl;

	mesh Th = square(2, 2);
	fespace Uh(Th, P1);
	Uh U;
	real[int] aU = U[];
	cout << "aU = " << aU << endl;
}

cout << "matrix" << endl;
// matrix
{
	matrix A = [
		[1, 2, 3],
		[4, 5, 6],
		[7, 8, 9]
	];

	mesh Th = square(10, 10);
	fespace Uh(Th, P1);
	varf vLaplacian(u, uh)
		= int2d(Th)(
			u * uh
		)
		+ on(u=0)
		;
	matrix<real> Laplacian = vLaplacian(Uh, Uh);
	real NRows = Laplacian.n;
	real NColumns = Laplacian.m;

	cout << "NRows / NColumns = " << NRows << "\t" << NColumns << endl;

	real[int] diag = Laplacian.diag;
	cout << "Aii diag = " << diag << endl;

	func real[int] P(real[int] &xx){
		return xx;
	}
	set(A, solver=sparsesolver, factorize=0, eps=1.e-6, tgv=1, precon=P, tolpivot=1.e-6, tolpivotsym=1.e-1, strategy=0);
}
